on:
  schedule:
    # 每天 05:00 执行（北京时间 13：00）
    - cron:  '0 5 * * *'
  # 允许手动执行
  workflow_dispatch:
    inputs:
      targetVersion:
        # 目标版本。不提供时会自动检查、更新代码版本、发布 latest release，提供了则不会更新代码版本，release 也不会 latest
        description: 'Calibre version'
        required: false
        default: ''
jobs:
  check-update:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.post.outputs.build }}
      update: ${{ steps.post.outputs.update }}
      version: ${{ steps.post.outputs.version }}
    steps:
      - name: fetch all tags
        uses: actions/checkout@v4
        if: ${{ inputs.targetVersion != '' }}
        with:
          fetch-depth: 0
      - name: fetch latest tag
        uses: actions/checkout@v4
        if: ${{ inputs.targetVersion == '' }}

      - name: Pre-check
        id: pre
        if: ${{ inputs.targetVersion != '' }}
        run: |
          calibre_url="https://raw.githubusercontent.com/kovidgoyal/calibre/v${{ inputs.targetVersion }}/src/calibre/db/backend.py"
          status_code=`curl -s -o /dev/null -w "%{http_code}" "${calibre_url}"`
          if [ ${status_code} = "200" ]; then
            echo "Target version check OK"
            echo "build=1"                   >> $GITHUB_OUTPUT
            echo "update=0"                  >> $GITHUB_OUTPUT
            echo "version=${{ inputs.targetVersion }}"  >> $GITHUB_OUTPUT
          else
            # 目标版本不存在
            echo "Target version not found"
            echo "::error title=Invalid version::Calibre v${{ inputs.targetVersion }} not exists"
            echo "build=0"                     >> $GITHUB_OUTPUT
            echo "update=0"                    >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT
      - name: Check Version
        id: check
        if: ${{ inputs.targetVersion == '' }}
        run: |
          curl -k https://code.calibre-ebook.com/latest -o REMOTE_VERSION
          echo "version=$(cat REMOTE_VERSION)" >> $GITHUB_OUTPUT
          if diff --brief REMOTE_VERSION CALIBRE_VERSION > /dev/null; then
            echo "::notice title=Calibre Version not Changed::$(cat REMOTE_VERSION)"
            echo "build=0"   >> $GITHUB_OUTPUT
            echo "update=0"  >> $GITHUB_OUTPUT
          else
            echo "::notice title=New Version Found!::$(cat REMOTE_VERSION)"
            echo "build=1"    >> $GITHUB_OUTPUT
            echo "update=1"   >> $GITHUB_OUTPUT
          fi
      - name: Post-check
        id: post
        run: |
          if [ "${{ inputs.targetVersion }}" = '' ]; then
            echo "build=${{ steps.check.outputs.build }}"      >> $GITHUB_OUTPUT
            echo "update=${{ steps.check.outputs.update }}"    >> $GITHUB_OUTPUT
            echo "version=${{ steps.check.outputs.version }}"  >> $GITHUB_OUTPUT
          else
            echo "build=${{ steps.pre.outputs.build }}"        >> $GITHUB_OUTPUT
            echo "update=${{ steps.pre.outputs.update }}"      >> $GITHUB_OUTPUT
            echo "version=${{ steps.pre.outputs.version }}"    >> $GITHUB_OUTPUT
          fi

  build-win:
    runs-on: windows-latest
    needs: [check-update]
    env:
      CALIBRE_VERSION: ${{ needs.check-update.outputs.version }}
      patch_win_v1: win-patch-backend-v${{ needs.check-update.outputs.version }}.zip
      patch_win_v2: win-patch-backend+update-v${{ needs.check-update.outputs.version }}.zip
      patch_win_msi: win-patched-${{ needs.check-update.outputs.version }}.msi
    if: needs.check-update.outputs.build == '1'
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies
        run: |
          echo "Downloading msi2xml"
          curl https://jaist.dl.sourceforge.net/project/msi2xml/msi2xml/2.2.1/msi2xml-2.2.1.957-bin.zip -o msi2xml.zip
          Expand-Archive msi2xml.zip -DestinationPath .

      - name: Download packages
        run: |
          echo "Downloading Windows msi v$Env:CALIBRE_VERSION"
          curl "https://download.calibre-ebook.com/$Env:CALIBRE_VERSION/calibre-64bit-$Env:CALIBRE_VERSION.msi" -o calibre.msi

          echo "Download Calibre source"
          git clone --depth 1 --branch v$Env:CALIBRE_VERSION https://github.com/kovidgoyal/calibre.git

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.build.outputs.pyver }}
          cache: 'pip'

      - name: Install Python requirements
        run: |
          pip install -r requirements.txt

      - name: Extract
        run: |
          .\msi2xml.exe -c calibre-win calibre.msi

      - name: Patch py
        run: |
          echo "[=] Patch backend.py"
          python patch_backend.py --os win calibre\src\calibre\db\backend.py backend.py
          python compile.py backend.py backend.pyc

          echo "[=] Patch filenames.py"
          python patch_filenames.py --os win calibre\src\calibre\utils\filenames.py filenames.py
          python compile.py filenames.py filenames.pyc

          echo "[=] Patch update.py"
          python patch_update.py calibre\src\calibre\gui2\update.py update.py
          python compile.py update.py update.pyc

      - name: Patch bypy
        run: |
          mkdir -p Calibre2\app\bin

          echo "[=] Patch bypy"
          $launcher=python xmltool.py find calibre.xml calibre-launcher.dll
          echo "launcher: $launcher"
          $bypy=python xmltool.py find calibre.xml python-lib.bypy.frozen
          echo "bypy: $bypy"
          echo "[==] Patch bypy:backend.pyc"
          python patch_bypy.py                          `
                  --os win                              `
                  --bypy $bypy                          `
                  --launcher $launcher                  `
                  --new-pyc-file backend.pyc            `
                  --embed_path "calibre/db/backend.pyc"
          
          echo "[==] Patch bypy:filenames.pyc"
          python patch_bypy.py                          `
                  --os win                              `
                  --bypy $bypy                          `
                  --launcher $launcher                  `
                  --new-pyc-file filenames.pyc            `
                  --embed_path "calibre/utils/filenames.pyc"

          cp $bypy Calibre2\app\bin\python-lib.bypy.frozen
          Compress-Archive    `
            -Path .\Calibre2  `
            -DestinationPath $Env:patch_win_v1

          echo "[==] Patch bypy:update.pyc"
          python patch_bypy.py                          `
                  --os win                              `
                  --bypy $bypy                          `
                  --launcher $launcher                  `
                  --new-pyc-file update.pyc             `
                  --embed_path "calibre/gui2/update.py"

          cp $bypy Calibre2\app\bin\python-lib.bypy.frozen
          Compress-Archive    `
            -Path .\Calibre2  `
            -DestinationPath $Env:patch_win_v2

          echo "[=] Patch xml"
          python xmltool.py patch calibre.xml python-lib.bypy.frozen $bypy

      - name: Repack
        run: |
          .\xml2msi.exe -o $Env:patch_win_msi calibre.xml

      - uses: actions/upload-artifact@v3
        with:
          name: patch_win_v1
          path: ${{ env.patch_win_v1 }}
      - uses: actions/upload-artifact@v3
        with:
          name: patch_win_v2
          path: ${{ env.patch_win_v2 }}
      - uses: actions/upload-artifact@v3
        with:
          name: patch_win_msi
          path: ${{ env.patch_win_msi }}


  update-upload:
    runs-on: ubuntu-latest
    needs: [check-update, build-win]
    env:
      CALIBRE_VERSION: ${{ needs.check-update.outputs.version }}

      patch_win_v1: win-patch-backend-v${{ needs.check-update.outputs.version }}.zip
      patch_win_v2: win-patch-backend+update-v${{ needs.check-update.outputs.version }}.zip
      patch_win_msi: win-patched-${{ needs.check-update.outputs.version }}.msi

    steps:
      - uses: actions/checkout@v3
      - name: Update Code
        if: needs.check-update.outputs.update == '1'
        run: |
          echo -n $CALIBRE_VERSION > CALIBRE_VERSION
          git config --local user.email actions@github.com
          git config --local user.name github-actions
          git add CALIBRE_VERSION
          git commit -m "Action: Update to v$CALIBRE_VERSION"
          git push

      - uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          body: |
            ## Calibre v${{ env.CALIBRE_VERSION }}

            ### 文件说明
            - backend.zip：只实现了路径不翻译。
            - backend+update.zip：在 backend 的基础上还 patch 了更新检查链接和新版本下载链接。使用这个补丁，Calibre 检查更新时会以本项目的版本为准，下版本下载链接也被替换成了本项目 latest releases 地址。
            - .msi/.txz：将 backend+update 补丁重新打包后的完整安装包

            ### 可能有用的链接们
            - 原版下载地址：https://calibre-ebook.com/download
            - 原版 Win：https://calibre-ebook.com/dist/win64
            - 原版 Linux x64：https://calibre-ebook.com/dist/linux-x86_64
            - 原版 Linux arm64：https://calibre-ebook.com/dist/linux-arm64
            - 原版 macOS：https://calibre-ebook.com/dist/osx
          draft: false
          tag_name: v${{ env.CALIBRE_VERSION }}
          # 因为 softprops/action-gh-releas 还没加 make_latest 选项，所以先用 prerelease 标记
          # 相关 PR：https://github.com/softprops/action-gh-release/pull/304
          prerelease: ${{ !needs.check-update.outputs.update }}
          files: |
            patch_win_v1/${{ env.patch_win_v1 }}
            patch_win_v2/${{ env.patch_win_v2 }}
            patch_win_msi/${{ env.patch_win_msi }}

